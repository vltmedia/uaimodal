{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the documentation for the uaimodal module.</p>"},{"location":"deploy/","title":"Deploy","text":""},{"location":"deploy/#deploy","title":"<code>deploy</code>","text":""},{"location":"deploy/#deploy.UAIModal","title":"<code>UAIModal</code>","text":"<code>applyAppImage()</code> <p>Run this when you are finished with the image and want to apply it to the app.</p> <code>copyLocalDirectories(directories=[])</code> <p>Copy local directories to the specified image.</p> <p>Parameters:</p> Name Type Description Default <code>directories</code> <code>list</code> <p>List of directories to copy. Defaults to an empty list. Each item is a list containing: - 'inputPath'[0] (str): The path of the directory to copy. - 'outputPath'[1] (str): The path where the directory will be copied to. If not provided, the directory will be copied to the root directory of the image.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the copied directories.</p> <code>copyLocalFileAndDirectories(items=[])</code> <p>Copies local directories to the image.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>list</code> <p>A list of directories to copy. Each item is a list containing: - 'inputPath'[0] (str): The path of the directory to copy. - 'outputPath'[1] (str): The path where the directory will be copied to. If not provided, the directory will be copied to the root directory of the image.</p> required <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the copied directories.</p> <code>copyLocalFiles(files=[])</code> <p>Copy local files and directories to the specified image.</p> <p>Parameters:</p> Name Type Description Default <code>files</code> <code>list</code> <p>A list of files and directories to be copied. Defaults to an empty list. Each item is a list containing: - 'inputPath'[0] (str): The path of the directory to copy. - 'outputPath'[1] (str): The path where the directory will be copied to. If not provided, the directory will be copied to the root directory of the image.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the copied files and directories.</p> <code>downloadFile(url, outputPath)</code> <p>Downloads a file from the specified URL and saves it to the specified output path.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the file to download.</p> required <code>outputPath</code> <code>str</code> <p>The path to save the downloaded file.</p> required <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the downloaded file.</p> <code>getDictValue(dictionary, key, defaultValue=None)</code> <p>Retrieves the value associated with the given key from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>dictionary</code> <code>dict</code> <p>The dictionary to retrieve the value from.</p> required <code>key</code> <code>str</code> <p>The key to look for in the dictionary.</p> required <code>defaultValue</code> <code>object</code> <p>The default value to return if the key is not found.  Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>object</code> <p>The value associated with the key if found, otherwise the defaultValue.</p> <code>installAWS()</code> <p>Installs the AWS Boto3 library in the given image.</p> <code>installCMake()</code> <p>Installs CMake and dlib on the given image.</p> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with CMake and dlib installed.</p> <code>installCuda12_4()</code> <p>Installs CUDA 12.4 on the specified image.</p> <p>Returns:</p> Name Type Description <code>Image</code> <p>The modified image with CUDA 12.4 installed.</p> <code>installFFMPEG()</code> <p>Installs FFMPEG and required libraries in the given Docker image.</p> <p>Returns:</p> Name Type Description <code>Image</code> <p>The modified Docker image with FFMPEG installed.</p> <code>installFirebase(serviceFile)</code> <p>Installs Firebase and copies the service account file to the image.</p> <p>Parameters:</p> Name Type Description Default <code>serviceFile</code> <code>str</code> <p>The path to the service account file.</p> required <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with Firebase installed.</p> <code>installFlask()</code> <p>Installs Flask and Flask-Cors packages in the given image.</p> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the packages installed.</p> <code>installGitModule(gitUrl, outputPath='/root')</code> <p>Clones a git repository from the specified URL and copies its contents to the specified output path.</p> <p>Parameters:</p> Name Type Description Default <code>gitUrl</code> <code>str</code> <p>The URL of the git repository to clone.</p> required <code>outputPath</code> <code>str</code> <p>The path where the cloned repository contents will be copied to. Defaults to \"/root\".</p> <code>'/root'</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image object after the installation.</p> <code>installMediaPipe()</code> <p>Installs the MediaPipe library.</p> <p>Returns:</p> Name Type Description <code>Image</code> <p>The input image.</p> <code>installMoviePy()</code> <p>Installs the MoviePy library in the given image.</p> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with MoviePy installed.</p> <code>installOpenCV()</code> <p>Installs OpenCV and its dependencies on the provided image.</p> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with OpenCV installed.</p> <code>installPythonRequirementsLocal(localPath='requirements.txt')</code> <p>Installs Python requirements from a given file into the specified Docker image.</p> <p>Parameters:</p> Name Type Description Default <code>localPath</code> <code>str</code> <p>The path to the requirements file on the local machine. Defaults to \"requirements.txt\".</p> <code>'requirements.txt'</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated Docker image with the requirements installed.</p> <code>installPythonRequirementsServer(serverPath='/root/requirements.txt')</code> <p>Installs Python requirements from a given requirements.txt file on the server.</p> <p>Parameters:</p> Name Type Description Default <code>serverPath</code> <code>str</code> <p>The path to the requirements.txt file on the server. Defaults to \"/root/requirements.txt\".</p> <code>'/root/requirements.txt'</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated Docker image with the installed requirements.</p> <code>installPytorch(cudaVersion=12.4, customCommand='')</code> <p>Installs PyTorch with the specified CUDA version or a custom command.</p> <p>Parameters:</p> Name Type Description Default <code>cudaVersion</code> <code>int</code> <p>The CUDA version to use for the installation. Default is 12.4.</p> <code>12.4</code> <code>customCommand</code> <code>str</code> <p>A custom command to use for the installation. If provided, this will override the CUDA version.</p> <code>''</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with PyTorch installed.</p> <code>installUAIDiffusers()</code> <p>Installs the UAIDiffusers library.</p> <code>installUtils()</code> <p>Install necessary utilities in the given image.</p> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with utilities installed.</p> <code>makeDirectories(directories=[])</code> <p>Make directories in the specified image.</p> <p>Parameters:</p> Name Type Description Default <code>directories</code> <code>list</code> <p>List of directories to copy. Defaults to an empty list</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the copied directories.</p> <code>runFunctions(functions=[])</code> <p>Runs a list of functions on the given image.</p> <p>functions (list): A list of dictionaries representing the functions to be run. Each dictionary should contain the following keys:     - 'gpu' (int): The number of GPUs to allocate for the function (default: None).     - 'cpu' (float): The number of CPU cores to allocate for the function (default: None).     - 'memory' (str): The amount of memory to allocate for the function (default: None).     - 'timeout' (int): The maximum execution time for the function in seconds (default: None).     - 'force_build' (bool): Whether to force the rebuild of the function's container (default: False).     - 'mounts' (tuple): A tuple of mount points to be mounted inside the function's container (default: ()).     - 'network_file_system' (dict): A dictionary of network file systems to be mounted inside the function's container (default: {}).     - 'secrets' (list): A list of secrets to be injected into the function's container (default: []).</p> <p>Returns: Image: The updated image object after running the functions.</p> <code>setEnvironmentVariable(variable={'DEV': 'True'})</code> <p>Sets an environment variable in the image.</p> <p>Parameters:</p> Name Type Description Default <code>variable</code> <code>dict</code> <p>A dictionary containing the environment variable to set.</p> <code>{'DEV': 'True'}</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the environment variable set.</p> <code>setEnvironmentVariables(variables=[])</code> <p>Sets multiple environment variables in the image.</p> <p>Parameters:</p> Name Type Description Default <code>variables</code> <code>list</code> <p>A list of dictionaries containing the environment variables to set.</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the environment variables set.</p> <code>unzipFile(filePath, outputPath, removeOriginal=True)</code> <p>Unzips a file at the specified path and saves it to the specified output path.</p> <p>Parameters:</p> Name Type Description Default <code>filePath</code> <code>str</code> <p>The path of the file to unzip.</p> required <code>outputPath</code> <code>str</code> <p>The path to save the unzipped file.</p> required <p>Returns:</p> Name Type Description <code>Image</code> <p>The updated image with the unzipped file.</p>"},{"location":"deploy/#deploy.initContainer","title":"<code>initContainer(appName='untitled', baseClass=Image.debian_slim, python_version='3.11')</code>","text":"<p>Initializes a container for the given app name, base class, and Python version.</p> <p>Parameters:</p> Name Type Description Default <code>appName</code> <code>str</code> <p>The name of the app. Default is \"untitled\".</p> <code>'untitled'</code> <code>baseClass</code> <code>Image</code> <p>The base class for the container. Default is Image.debian_slim.</p> <code>debian_slim</code> <code>python_version</code> <code>str</code> <p>The Python version to use. Default is \"3.11\".</p> <code>'3.11'</code> <p>Returns:</p> Name Type Description <code>tuple</code> <code>(App, UAIModal)</code> <p>A tuple containing the initialized app and image objects.</p>"},{"location":"deploy/#deploy.initFullAppContainer","title":"<code>initFullAppContainer(appName='untitled', python_version='3.11', firebaseServiceJson='', cudaVersion=12.4, fileDirectories=[], cmake=False, filesToDownload=[], filesToUnzip=[], gitModules=[], requirementsLocal='', requirementsServer='', postFunctions=[], pytorchCustom='', ffmpeg=True, newDirectories=[])</code>","text":"<p>Initializes a full application container with the specified configurations.</p> <p>Parameters:</p> Name Type Description Default <code>appName</code> <code>str</code> <p>The name of the application. Defaults to \"untitled\".</p> <code>'untitled'</code> <code>python_version</code> <code>str</code> <p>The version of Python to use. Defaults to \"3.11\".</p> <code>'3.11'</code> <code>firebaseServiceJson</code> <code>str</code> <p>The path to the Firebase service JSON file. Defaults to \"\".</p> <code>''</code> <code>cudaVersion</code> <code>float</code> <p>The version of CUDA to use. Defaults to 12.4.</p> <code>12.4</code> <code>fileDirectories</code> <code>list</code> <p>A list of file directories to copy to the container. Defaults to [].</p> <code>[]</code> <code>cmake</code> <code>bool</code> <p>Whether to install CMake. Defaults to False.</p> <code>False</code> <code>filesToDownload</code> <code>list</code> <p>A list of files to download. Each item in the list should be a tuple containing the URL and the destination path. Defaults to [].</p> <code>[]</code> <code>filesToUnzip</code> <code>list</code> <p>A list of files to unzip. Each item in the list should be a tuple containing the source path and the destination path. Defaults to [].</p> <code>[]</code> <code>gitModules</code> <code>list</code> <p>A list of Git modules to install. Each item in the list should be a tuple containing the repository URL and the destination path. Defaults to [].</p> <code>[]</code> <code>requirementsLocal</code> <code>str</code> <p>The path to the local Python requirements file. Defaults to \"\".</p> <code>''</code> <code>requirementsServer</code> <code>str</code> <p>The path to the server Python requirements file. Defaults to \"\".</p> <code>''</code> <code>postFunctions</code> <code>list</code> <p>A list of functions to run after the container is initialized. Defaults to [].</p> <code>[]</code> <code>pytorchCustom</code> <code>str</code> <p>The path to the custom PyTorch installation. Defaults to \"\".</p> <code>''</code> <code>ffmpeg</code> <code>bool</code> <p>Whether to install FFmpeg. Defaults to True.</p> <code>True</code> <code>newDirectories</code> <code>list</code> <p>A list of new directories to create in the container. Defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>UAIModal</code> <code>UAIModal</code> <p>The initialized UAIModal object.</p>"},{"location":"deploy/#deploy.initUAIContainer","title":"<code>initUAIContainer(appName='untitled', python_version='3.11', firebaseServiceJson='', cudaVersion=12.4, pytorchCustom='', ffmpeg=True, newDirectories=[])</code>","text":"<p>Create a new container that UAI usually uses for its applications.</p> <p>Parameters:</p> Name Type Description Default <code>appName</code> <code>str</code> <p>The name of the application. Defaults to \"untitled\".</p> <code>'untitled'</code> <code>python_version</code> <code>str</code> <p>The version of Python to be used in the container. Defaults to \"3.11\".</p> <code>'3.11'</code> <code>firebaseServiceJson</code> <code>str</code> <p>The path to the Firebase service account JSON file. Defaults to \"\".</p> <code>''</code> <code>cudaVersion</code> <code>float</code> <p>The version of CUDA to be installed. Defaults to 12.4.</p> <code>12.4</code> <code>pytorchCustom</code> <code>str</code> <p>Custom command for installing PyTorch. Defaults to \"\".</p> <code>''</code> <code>ffmpeg</code> <code>bool</code> <p>Whether to install FFMPEG. Defaults to True.</p> <code>True</code> <code>newDirectories</code> <code>list</code> <p>List of new directories to be created in the container. Defaults to [].</p> <code>[]</code> <p>Returns:</p> Name Type Description <code>UAIModal</code> <code>UAIModal</code> <p>The initialized UAIModal object.</p>"},{"location":"deploy_/","title":"Deploy Module for uaimodal Python Package","text":""},{"location":"deploy_/#overview","title":"Overview","text":"<p>The <code>Deploy</code> module is part of the <code>uaimodal</code> Python package and provides a suite of methods to assist with deploying and managing containerized applications. This module is designed to handle various tasks such as installing Python dependencies, copying files, downloading resources, and configuring containers.</p>"},{"location":"deploy_/#installation","title":"Installation","text":"<p>To install the <code>uaimodal</code> package, you can use pip:</p> <pre><code>pip install uaimodal\n</code></pre>"},{"location":"deploy_/#features","title":"Features","text":"<p>The <code>Deploy</code> module includes the following key methods:</p>"},{"location":"deploy_/#1-installpythonrequirementslocallocalpath-str","title":"1. <code>installPythonRequirementsLocal(localPath: str)</code>","text":"<p>Installs Python requirements from a local <code>requirements.txt</code> file.</p> <p>Arguments: - <code>localPath (str)</code>: The path to the local <code>requirements.txt</code> file.</p> <p>Returns: - Updated Docker image with installed requirements.</p>"},{"location":"deploy_/#2-installpythonrequirementsserverserverpath-str-rootrequirementstxt","title":"2. <code>installPythonRequirementsServer(serverPath: str = \"/root/requirements.txt\")</code>","text":"<p>Installs Python requirements from a server <code>requirements.txt</code> file.</p> <p>Arguments: - <code>serverPath (str, optional)</code>: The path to the <code>requirements.txt</code> file on the server.</p> <p>Returns: - Updated Docker image with installed requirements.</p>"},{"location":"deploy_/#3-copylocalfileanddirectoriesitems-list","title":"3. <code>copyLocalFileAndDirectories(items: list)</code>","text":"<p>Copies local files and directories to the image.</p> <p>Arguments: - <code>items (list)</code>: A list of directories to copy, each containing an input and output path.</p> <p>Returns: - Updated Docker image with copied files and directories.</p>"},{"location":"deploy_/#4-copylocalfilesfiles-list","title":"4. <code>copyLocalFiles(files: list)</code>","text":"<p>Copies local files to the specified image.</p> <p>Arguments: - <code>files (list, optional)</code>: A list of files and directories to be copied.</p> <p>Returns: - Updated Docker image with copied files.</p>"},{"location":"deploy_/#5-downloadfileurl-str-destination-str","title":"5. <code>downloadFile(url: str, destination: str)</code>","text":"<p>Downloads a file from a URL and saves it to the specified destination.</p> <p>Arguments: - <code>url (str)</code>: The URL of the file to download. - <code>destination (str)</code>: The destination path where the file will be saved.</p> <p>Returns: - Updated Docker image with the downloaded file.</p>"},{"location":"deploy_/#6-unzipfilesource-str-destination-str","title":"6. <code>unzipFile(source: str, destination: str)</code>","text":"<p>Unzips a file from a source path to a destination path.</p> <p>Arguments: - <code>source (str)</code>: The path to the zip file. - <code>destination (str)</code>: The path where the files will be extracted.</p> <p>Returns: - Updated Docker image with the unzipped files.</p>"},{"location":"deploy_/#7-installgitmodulerepo_url-str-destination-str","title":"7. <code>installGitModule(repo_url: str, destination: str)</code>","text":"<p>Clones and installs a Git module.</p> <p>Arguments: - <code>repo_url (str)</code>: The URL of the Git repository. - <code>destination (str)</code>: The path where the module will be installed.</p> <p>Returns: - Updated Docker image with the installed Git module.</p>"},{"location":"deploy_/#8-initcontainerappname-str-various-options","title":"8. <code>initContainer(appName: str, ... various options ...)</code>","text":"<p>Initializes a container with the given parameters, including optional file downloads, unzipping, Git module installations, and Python requirements installations.</p> <p>Arguments: - <code>appName (str)</code>: The name of the application to deploy. - <code>python_version (str, optional)</code>: The Python version to use in the container. - <code>firebaseServiceJson (str, optional)</code>: Path to Firebase service JSON file. - <code>cmake (bool, optional)</code>: Whether to install CMake. - <code>cudaVersion (str, optional)</code>: CUDA version to install. - <code>filesToDownload (list, optional)</code>: List of files to download. - <code>filesToUnzip (list, optional)</code>: List of files to unzip. - <code>gitModules (list, optional)</code>: List of Git modules to install. - <code>requirementsLocal (str, optional)</code>: Path to local Python requirements file. - <code>requirementsServer (str, optional)</code>: Path to server Python requirements file. - <code>postFunctions (list, optional)</code>: List of functions to run post-initialization. - <code>pytorchCustom (str, optional)</code>: Path to custom PyTorch installation. - <code>ffmpeg (bool, optional)</code>: Whether to install FFmpeg. - <code>newDirectories (list, optional)</code>: List of new directories to create in the container.</p> <p>Returns: - Initialized <code>UAIModal</code> object.</p>"},{"location":"deploy_/#usage","title":"Usage","text":"<p>To use the <code>Deploy</code> module, first import it and then initialize it with the desired configuration:</p> <pre><code>import uaimodal\n\nuModal = uaimodal.initUAIContainer(\"testToKill-01\", python_version= \"3.11\",firebaseServiceJson= \"user.json\",cudaVersion=12.4, ffmpeg=True, newDirectories=[\"/root/datasets/input\"])\nuModal.installGitModule( \"https://github.com/OpenTalker/video-retalking\",\"/root\")\nuModal.downloadFile( \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\", \"/root/BigBuckBunny.mp4\" )\nuModal.copyLocalFileAndDirectories([[\"checkpoints.zip\", \"/root/checkpoints.zip\"]])\nuModal.unzipFile( \"/root/checkpoints.zip\", \"/root\")\nuModal.installCMake()\nuModal.installPythonRequirementsServer( \"/root/requirements.txt\")\nuModal.copyLocalFileAndDirectories( [\n    [\"usersilence.wav\", \"/root/usersilence.wav\"],\n    [\"short.wav\", \"/root/short.wav\"],\n    [\"testVideo.mp4\", \"/root/testVideo.mp4\"]\n    [\"extract_kp_videos.py\", \"/root/third_part/face3d/extract_kp_videos.py\"]\n                                ])\n# Always call this to apply the image to the application\nuModal.applyAppImage()\n\n# These are the modal objects ready to be consumed.\napp = uModal.app\nimage = uModal.image\n\n</code></pre> <p>This will set up your container with the specified Python dependencies and files.</p>"},{"location":"deploy_/#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"deploy_/#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"deploy_/#contact","title":"Contact","text":"<p>For any questions or issues, please contact the maintainer at <code>support@uaimodal.io</code>.</p>"},{"location":"firebase/","title":"Firebase","text":""},{"location":"firebase/#api.firebase","title":"<code>api.firebase</code>","text":""},{"location":"firebase/#api.firebase.deleteDoc","title":"<code>deleteDoc(collection, doc)</code>","text":"<p>Deletes a document from a specified collection in the Firebase Firestore database.</p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>str</code> <p>The name of the collection where the document is located.</p> required <code>doc</code> <code>str</code> <p>The ID of the document to be deleted.</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"firebase/#api.firebase.deleteStorage","title":"<code>deleteStorage(path)</code>","text":"<p>Deletes a file from the Firebase storage.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path of the file to be deleted.</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"firebase/#api.firebase.getCred","title":"<code>getCred()</code>","text":"<p>Retrieves the Firebase credentials.</p> <p>If the credentials have not been initialized, this function calls the <code>initFirebase</code> function to initialize them.</p> <p>Returns:</p> Type Description <p>The Firebase credentials.</p>"},{"location":"firebase/#api.firebase.getDB","title":"<code>getDB()</code>","text":"<p>Retrieves the Firebase database instance.</p> <p>If the database instance is not initialized, it will be initialized by calling the <code>initFirebase</code> function.</p> <p>Returns:</p> Type Description <p>The Firebase database instance.</p>"},{"location":"firebase/#api.firebase.getDoc","title":"<code>getDoc(collection, doc)</code>","text":"<p>Retrieves a document from a specified collection in the Firebase database.</p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>str</code> <p>The name of the collection to retrieve the document from.</p> required <code>doc</code> <code>str</code> <p>The ID of the document to retrieve.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary representing the retrieved document, or None if the document does not exist.</p>"},{"location":"firebase/#api.firebase.getStorageBlob","title":"<code>getStorageBlob(path)</code>","text":"<p>Retrieves a storage blob from the default bucket.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the blob.</p> required <p>Returns:</p> Name Type Description <code>Blob</code> <p>The storage blob object.</p>"},{"location":"firebase/#api.firebase.getStorageBytes","title":"<code>getStorageBytes(path)</code>","text":"<p>Retrieves the bytes of a file from the storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file in the storage bucket.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <p>The bytes of the file.</p>"},{"location":"firebase/#api.firebase.getStorageJson","title":"<code>getStorageJson(path)</code>","text":"<p>Retrieves a JSON file from a storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the JSON file in the storage bucket.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>The JSON data as a dictionary.</p> Example <p>getStorageJson('path/to/file.json') {'key1': 'value1', 'key2': 'value2'}</p>"},{"location":"firebase/#api.firebase.getStorageText","title":"<code>getStorageText(path)</code>","text":"<p>Retrieves the text content of a file from a storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file in the storage bucket.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The text content of the file.</p>"},{"location":"firebase/#api.firebase.getStorageURL","title":"<code>getStorageURL(path)</code>","text":"<p>Retrieves the public URL of a file stored in the Firebase storage.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path of the file in the storage.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The public URL of the file.</p>"},{"location":"firebase/#api.firebase.initDoc","title":"<code>initDoc(collection)</code>","text":"<p>Generate a new document in the collection and return the document ID. This is useful so you don't have to create the document id and possibly have duplicates.</p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>str</code> <p>The name of the collection where the document will be created.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The ID of the newly created document.</p>"},{"location":"firebase/#api.firebase.initFirebase","title":"<code>initFirebase(servicePath='service.json', bucket='bucket.appspot.com')</code>","text":"<p>Initializes the Firebase connection and returns the Firestore client and credentials.</p> <p>Parameters:</p> Name Type Description Default <code>servicePath</code> <code>str</code> <p>The path to the service account JSON file. Defaults to \"service.json\".</p> <code>'service.json'</code> <code>bucket</code> <code>str</code> <p>The storage bucket URL. Defaults to \"bucket.appspot.com\".</p> <code>'bucket.appspot.com'</code> <p>Returns:</p> Name Type Description <code>db</code> <code>Client</code> <p>The Firestore client.</p> <code>cred</code> <code>Certificate</code> <p>The Firebase credentials.</p>"},{"location":"firebase/#api.firebase.saveBytesToStorage","title":"<code>saveBytesToStorage(data, path, public=True)</code>","text":"<p>Saves bytes data to a storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <p>The bytes data to be saved.</p> required <code>path</code> <p>The path where the data will be stored in the bucket.</p> required <code>public</code> <p>A boolean indicating whether the stored data should be made public (default is True).</p> <code>True</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"firebase/#api.firebase.saveFileObjectToStorage","title":"<code>saveFileObjectToStorage(fileObject, path, public=True)</code>","text":"<p>Saves a file object to a storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>fileObject</code> <p>The file object to be saved.</p> required <code>path</code> <p>The path where the file should be stored in the bucket.</p> required <code>public</code> <p>A boolean indicating whether the file should be made public (default is True).</p> <code>True</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"firebase/#api.firebase.saveJsonToStorage","title":"<code>saveJsonToStorage(data, path, public=True)</code>","text":"<p>Saves a JSON object to a storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>The JSON object to be saved.</p> required <code>path</code> <code>str</code> <p>The path to the storage bucket where the JSON object will be saved.</p> required <code>public</code> <code>bool</code> <p>Specifies whether the saved JSON object should be made public.                       Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"firebase/#api.firebase.saveStringToStorage","title":"<code>saveStringToStorage(data, path, public=True)</code>","text":"<p>Saves a string to a storage bucket.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The string data to be saved.</p> required <code>path</code> <code>str</code> <p>The path where the string data will be saved in the storage bucket.</p> required <code>public</code> <code>bool</code> <p>Determines whether the saved file should be publicly accessible.                       Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <p>None</p>"},{"location":"firebase/#api.firebase.setDoc","title":"<code>setDoc(collection, doc, data)</code>","text":"<p>Sets the data for a document in a collection in the Firebase Firestore database.</p> <p>Parameters:</p> Name Type Description Default <code>collection</code> <code>str</code> <p>The name of the collection in which the document resides.</p> required <code>doc</code> <code>str</code> <p>The ID of the document to be updated.</p> required <code>data</code> <code>dict</code> <p>The data to be set for the document.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The updated document as a dictionary.</p>"},{"location":"firebase/#api.firebase.upload_file_to_space","title":"<code>upload_file_to_space(file_src, save_as, **kwargs)</code>","text":"<p>:param spaces_client: Your DigitalOcean Spaces client from get_spaces_client() :param space_name: Unique name of your space. Can be found at your digitalocean panel :param file_src: File location on your disk :param save_as: Where to save your file in the space :param kwargs :return:</p>"},{"location":"jobs/","title":"Jobs","text":""},{"location":"jobs/#api.job","title":"<code>api.job</code>","text":""},{"location":"jobs/#api.job.createJob","title":"<code>createJob(name, user, request, result)</code>","text":"<p>Creates a new job with the given parameters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the job.</p> required <code>user</code> <code>str</code> <p>The user associated with the job.</p> required <code>request</code> <code>str</code> <p>The request for the job.</p> required <code>result</code> <code>str</code> <p>The result of the job.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary representing the created job.</p>"},{"location":"jobs/#api.job.deleteJob","title":"<code>deleteJob(jobId)</code>","text":"<p>Deletes a job with the given jobId.</p> <p>Parameters: - jobId (str): The ID of the job to be deleted.</p> <p>Returns: None</p>"},{"location":"jobs/#api.job.findJob","title":"<code>findJob(jobId)</code>","text":"<p>Finds a job with the given jobId.</p> <p>Parameters:</p> Name Type Description Default <code>jobId</code> <code>int</code> <p>The ID of the job to find.</p> required <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing the job object and its state. The job object is an instance of the Job class. The state is a string indicating the current state of the job.</p>"},{"location":"jobs/#api.job.getFinishedJobs","title":"<code>getFinishedJobs()</code>","text":"<p>Retrieves a collection of finished jobs.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of finished jobs.</p>"},{"location":"jobs/#api.job.getJob","title":"<code>getJob(jobId, state='pending')</code>","text":"<p>Retrieves a job based on the provided jobId and state.</p> <p>Parameters:</p> Name Type Description Default <code>jobId</code> <code>int</code> <p>The ID of the job to retrieve.</p> required <code>state</code> <code>str</code> <p>The state of the job. Defaults to \"pending\".</p> <code>'pending'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The job document.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid state is provided.</p>"},{"location":"jobs/#api.job.getJobResults","title":"<code>getJobResults(jobId)</code>","text":"<p>Retrieves the results of a finished job.</p> <p>Parameters:</p> Name Type Description Default <code>jobId</code> <code>str</code> <p>The ID of the job to retrieve results for.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>A dictionary containing the job results.</p>"},{"location":"jobs/#api.job.getJobSchema","title":"<code>getJobSchema()</code>","text":"<p>Returns the schema for a job object.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The schema for a job object.</p>"},{"location":"jobs/#api.job.getJobs","title":"<code>getJobs()</code>","text":"<p>Retrieves all jobs from the system.</p> <p>Returns:</p> Type Description <p>A list of all jobs, including pending, running, and finished jobs.</p>"},{"location":"jobs/#api.job.getPendingJobs","title":"<code>getPendingJobs()</code>","text":"<p>Retrieves a collection of pending jobs.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of pending jobs.</p>"},{"location":"jobs/#api.job.getRunningJobs","title":"<code>getRunningJobs()</code>","text":"<p>Retrieves the collection of running jobs.</p> <p>Returns:</p> Type Description <p>The collection of running jobs.</p>"},{"location":"jobs/#api.job.setJob","title":"<code>setJob(jobId, data, state='pending')</code>","text":"<p>Sets the job with the given jobId to the specified state and updates its data.</p> <p>Parameters:</p> Name Type Description Default <code>jobId</code> <code>any</code> <p>The unique identifier of the job.</p> required <code>data</code> <code>any</code> <p>The updated data for the job.</p> required <code>state</code> <code>str</code> <p>The state to set the job to. Defaults to \"pending\".</p> <code>'pending'</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The updated job information.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; setJob(123, {\"name\": \"Job 1\", \"status\": \"completed\"}, \"completed\")\n{'jobId': 123, 'name': 'Job 1', 'status': 'completed'}\n</code></pre>"},{"location":"jobs/#api.job.setJobFinished","title":"<code>setJobFinished(jobId, data)</code>","text":"<p>Sets the status of a job to 'finished' and returns the updated job information.</p> <p>Parameters: - jobId (int): The ID of the job to update. - data (dict): The data to update the job with.</p> <p>Returns: - dict: The updated job information.</p>"},{"location":"jobs/#api.job.setJobPending","title":"<code>setJobPending(jobId, data)</code>","text":"<p>Sets the status of a job to 'pending'.</p> <p>Parameters:</p> Name Type Description Default <code>jobId</code> <code>int</code> <p>The ID of the job.</p> required <code>data</code> <code>dict</code> <p>Additional data for the job.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>The updated job information.</p>"},{"location":"jobs/#api.job.setJobRunning","title":"<code>setJobRunning(jobId, data)</code>","text":"<p>Sets the status of a job to 'running'.</p> <p>Parameters:</p> Name Type Description Default <code>jobId</code> <code>int</code> <p>The ID of the job.</p> required <code>data</code> <code>dict</code> <p>Additional data for the job.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing the updated job information.</p>"},{"location":"jobs/#api.job.updateJobResult","title":"<code>updateJobResult(jobId, data, inputJob=None)</code>","text":"<p>Updates the result of a job with the given jobId. Also sets the job status to 'finished'.</p> <p>Parameters:</p> Name Type Description Default <code>jobId</code> <code>str</code> <p>The ID of the job to update.</p> required <code>data</code> <code>any</code> <p>The result data to be assigned to the job.</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"jobs/#job-schema","title":"Job Schema","text":"<p>The job schema is a JSON object that defines the structure of a job. It contains the following fields:</p> Field Type Required Unique Default Options id string True True name string False False user string False False request string False False result string False False status string False False idle idle, pending, running, finished, error messages string False False"},{"location":"jobs/#json-schema","title":"JSON Schema","text":"<pre><code>{\n    \"id\":{\"type\":\"string\", \"required\":True, \"unique\":True, \"default\": \"\",\"options\":[]},\n    \"name\":{\"type\":\"string\", \"required\":False, \"unique\":False, \"default\": \"\",\"options\":[]},\n    \"user\":{\"type\":\"string\", \"required\":False, \"unique\":False, \"default\": \"\",\"options\":[]},\n    \"request\":{\"type\":\"string\", \"required\":False, \"unique\":False, \"default\": \"\",\"options\":[]},\n    \"result\":{\"type\":\"string\", \"required\":False, \"unique\":False, \"default\": \"\",\"options\":[]},\n    \"status\":{\"type\":\"string\", \"required\":False, \"unique\":False, \"default\": \"idle\", \"options\":[\"idle\",\"pending\", \"running\", \"finished\", \"error\"]},\n    \"messages\":{\"type\":\"string\", \"required\":False, \"unique\":False, \"default\": \"\",\"options\":[]},\n}\n</code></pre>"},{"location":"utils/","title":"Utils","text":""},{"location":"utils/#utils","title":"<code>utils</code>","text":""},{"location":"utils/#utils.Base64ToBytes","title":"<code>Base64ToBytes(data)</code>","text":"<p>Converts a base64 encoded string to bytes.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The base64 encoded string to be converted.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <p>The decoded bytes.</p>"},{"location":"utils/#utils.BytesToBase64","title":"<code>BytesToBase64(data)</code>","text":"<p>Converts a byte array to a base64 encoded string.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>bytes</code> <p>The byte array to be converted.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The base64 encoded string.</p>"},{"location":"utils/#utils.DetectStringType","title":"<code>DetectStringType(value)</code>","text":"<p>Detects the type of a string value. Possible types are: \"url\", \"int\", \"float\", \"bool\", \"list\", \"dict\", \"tuple\", \"hex\", \"binary\", \"string\".</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The string value to detect the type of.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The type of the string value.</p>"},{"location":"utils/#utils.GetDictValue","title":"<code>GetDictValue(dictionary, key, defaultValue=None)</code>","text":"<p>Retrieves the value associated with the given key from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>dictionary</code> <code>dict</code> <p>The dictionary to retrieve the value from.</p> required <code>key</code> <code>str</code> <p>The key to look for in the dictionary.</p> required <code>defaultValue</code> <code>object</code> <p>The default value to return if the key is not found.  Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>object</code> <p>The value associated with the key if found, otherwise the defaultValue.</p>"},{"location":"utils/#utils.GetURLBytes","title":"<code>GetURLBytes(url)</code>","text":"<p>Retrieves the content of a URL as bytes.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to retrieve the content from.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <p>The content of the URL as bytes.</p>"},{"location":"utils/#utils.GetURLJson","title":"<code>GetURLJson(url)</code>","text":"<p>Sends a GET request to the specified URL and returns the response as a JSON object.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to send the GET request to.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <p>The JSON response from the URL.</p> <p>Raises:</p> Type Description <code>RequestException</code> <p>If an error occurs while making the request.</p>"},{"location":"utils/#utils.GetURLText","title":"<code>GetURLText(url)</code>","text":"<p>Retrieves the text content of a given URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to retrieve the text from.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The text content of the URL.</p> <p>Raises:</p> Type Description <code>RequestException</code> <p>If an error occurs while making the request.</p>"},{"location":"utils/#utils.ReadFromPath","title":"<code>ReadFromPath(path)</code>","text":"<p>Reads the contents of a file from the given path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <p>The contents of the file as bytes.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist.</p> <code>IOError</code> <p>If there is an error reading the file.</p>"},{"location":"utils/#utils.ReadFromPathBase64","title":"<code>ReadFromPathBase64(path)</code>","text":"<p>Reads the contents of a file at the given path and returns the base64-encoded data.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the file.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The base64-encoded data read from the file.</p>"},{"location":"utils/#utils.SanitizeURL","title":"<code>SanitizeURL(url)</code>","text":"<p>Sanitizes a URL by removing any whitespace characters, converting dropbox links to direct download links, and blocking any blacklisted urls.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL to sanitize.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The sanitized URL.</p>"},{"location":"utils/#utils.SaveToPath","title":"<code>SaveToPath(data, path)</code>","text":"<p>Saves the given data to the specified path.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <p>The data to be saved.</p> required <code>path</code> <p>The path where the data will be saved.</p> required <p>Returns:</p> Type Description <p>None</p>"},{"location":"utils/#utils.getRootPath","title":"<code>getRootPath(defaultPath='/root')</code>","text":"<p>Returns the root path.</p> <p>Parameters:</p> Name Type Description Default <code>defaultPath</code> <code>str</code> <p>The default root path. Defaults to \"/root\".</p> <code>'/root'</code> <p>Returns:</p> Name Type Description <code>str</code> <p>The root path.</p>"},{"location":"utils/#utils.make_archive","title":"<code>make_archive(source, destination)</code>","text":"<p>Create an archive file from a source directory.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>str</code> <p>The path to the source directory.</p> required <code>destination</code> <code>str</code> <p>The path to the destination archive file.</p> required <p>Returns:</p> Type Description <p>None</p>"}]}